/*2018.08.29
*Problem:
  You are a product manager and currently leading a team to develop a new product. 
  Unfortunately, the latest version of your product fails the quality check. 
  Since each version is developed based on the previous version, all the versions after a bad version are also bad.
  Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.
  You are given an API bool isBadVersion(version) which will return whether version is bad. 
  Implement a function to find the first bad version. You should minimize the number of calls to the API.
*status : Accepted
*/

//===========================================
/**
 * Definition for isBadVersion()
 * 
 * @param {integer} version number
 * @return {boolean} whether the version is bad
 * isBadVersion = function(version) {
 *     ...
 * };
 */

/**
 * @param {function} isBadVersion()
 * @return {function}
 */
 //函数可以作为参数传递，相当于一个函数指针，所以传入的是函数名不带括号
var solution = function(isBadVersion) {
    /**
     * @param {integer} n Total versions
     * @return {integer} The first bad version
     */
     //返回一个函数，带括号的那种，实际上返回的是函数执行操作后的结果
    return function(n) {
        for(var i = 1;i < n; i++){
            if(isBadVersion(i)==false && isBadVersion(i+1)==true) {
                return i+1;
            }
        }
    };
};
